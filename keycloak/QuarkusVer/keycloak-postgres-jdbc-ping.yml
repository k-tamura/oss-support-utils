version: '3'

volumes:
  postgres_data:
    driver: local

services:
  postgres:
    image: 'postgres:alpine'
    volumes:
      - ./postgres:/var/lib/postgresql/data
    restart: 'always'
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
      POSTGRES_DB: keycloak
      POSTGRES_HOST: postgres

  traefik:
    image: library/traefik:alpine
    container_name: traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      --logLevel=ERROR
      --api.dashboard
      --docker
      --entrypoints="Name:http Address::80"
      --defaultentrypoints="http"
    ports:
      - 80:80
      - 3000:8080

  keycloak:
    #image: quay.io/keycloak/keycloak:21.0
    # If you don't want to use microdnf, uncomment the line above and comment out the line below.
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./cache-ispn-jdbc-ping.xml:/opt/keycloak/conf/cache-ispn-jdbc-ping.xml
    ports:
      - 8787-8797:8787
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_LOG: console,file
      KC_LOG_FILE: /opt/keycloak/data/logs/server.log
      # KEYCLOAK_LOGLEVEL: DEBUG
      KC_LOG_CONSOLE_COLOR: true
      QUARKUS_HTTP_ACCESS_LOG_ENABLED: true
      QUARKUS_HTTP_ACCESS_LOG_LOG_TO_FILE: true
      QUARKUS_HTTP_ACCESS_LOG_LOG_DIRECTORY: /opt/keycloak/data/logs
      QUARKUS_HTTP_ACCESS_LOG_BASE_FILE_NAME: access
      QUARKUS_HTTP_ACCESS_LOG_PATTERN: '%h %l %u %t "%r" %s %b "%{i,Referer}" "%{i,User-Agent}" %D'
      QUARKUS_HTTP_ACCESS_LOG_ROTATE: true
      QUARKUS_HTTP_RECORD_REQUEST_START_TIME: true
      DEBUG_PORT: '*:8787'
      DEBUG: true
      KC_CACHE_CONFIG_FILE: cache-ispn-jdbc-ping.xml
      JGROUPS_DISCOVERY_PROTOCOL: JDBC_PING
      JGROUPS_DISCOVERY_PROPERTIES: datasource_jndi_name=java:jboss/datasources/KeycloakDS,info_writer_sleep_time=500,initialize_sql="CREATE TABLE IF NOT EXISTS JGROUPSPING ( own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, created timestamp default current_timestamp, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))"
    depends_on:
      - postgres
    command: start-dev
    labels:
      traefik.enable: true
      traefik.port: 8080
      traefik.protocol: http
      traefik.frontend.rule: Host:localhost
      traefik.frontend.passHostHeader: true
      # traefik.backend.loadbalancer.stickiness: true
